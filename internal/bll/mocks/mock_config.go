// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asatraitis/mangrove/internal/bll (interfaces: ConfigBLL)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_config.go -package=mocks github.com/asatraitis/mangrove/internal/bll ConfigBLL
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dal "github.com/asatraitis/mangrove/internal/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigBLL is a mock of ConfigBLL interface.
type MockConfigBLL struct {
	ctrl     *gomock.Controller
	recorder *MockConfigBLLMockRecorder
	isgomock struct{}
}

// MockConfigBLLMockRecorder is the mock recorder for MockConfigBLL.
type MockConfigBLLMockRecorder struct {
	mock *MockConfigBLL
}

// NewMockConfigBLL creates a new mock instance.
func NewMockConfigBLL(ctrl *gomock.Controller) *MockConfigBLL {
	mock := &MockConfigBLL{ctrl: ctrl}
	mock.recorder = &MockConfigBLLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigBLL) EXPECT() *MockConfigBLLMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockConfigBLL) GetAll() (dal.Configs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(dal.Configs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockConfigBLLMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockConfigBLL)(nil).GetAll))
}

// InitRegistrationCode mocks base method.
func (m *MockConfigBLL) InitRegistrationCode() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitRegistrationCode")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitRegistrationCode indicates an expected call of InitRegistrationCode.
func (mr *MockConfigBLLMockRecorder) InitRegistrationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRegistrationCode", reflect.TypeOf((*MockConfigBLL)(nil).InitRegistrationCode))
}

// Set mocks base method.
func (m *MockConfigBLL) Set(arg0 dal.ConfigKey, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockConfigBLLMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConfigBLL)(nil).Set), arg0, arg1)
}

// ValidateRegistrationCode mocks base method.
func (m *MockConfigBLL) ValidateRegistrationCode(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRegistrationCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRegistrationCode indicates an expected call of ValidateRegistrationCode.
func (mr *MockConfigBLLMockRecorder) ValidateRegistrationCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRegistrationCode", reflect.TypeOf((*MockConfigBLL)(nil).ValidateRegistrationCode), arg0)
}
