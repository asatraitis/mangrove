// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asatraitis/mangrove/internal/dal (interfaces: DAL)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_dal.go -package=mocks github.com/asatraitis/mangrove/internal/dal DAL
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/asatraitis/mangrove/internal/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockDAL is a mock of DAL interface.
type MockDAL struct {
	ctrl     *gomock.Controller
	recorder *MockDALMockRecorder
	isgomock struct{}
}

// MockDALMockRecorder is the mock recorder for MockDAL.
type MockDALMockRecorder struct {
	mock *MockDAL
}

// NewMockDAL creates a new mock instance.
func NewMockDAL(ctrl *gomock.Controller) *MockDAL {
	mock := &MockDAL{ctrl: ctrl}
	mock.recorder = &MockDALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAL) EXPECT() *MockDALMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockDAL) Config(ctx context.Context) dal.ConfigDAL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config", ctx)
	ret0, _ := ret[0].(dal.ConfigDAL)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockDALMockRecorder) Config(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockDAL)(nil).Config), ctx)
}
