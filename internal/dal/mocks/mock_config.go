// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asatraitis/mangrove/internal/dal (interfaces: ConfigDAL)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_config.go -package=mocks github.com/asatraitis/mangrove/internal/dal ConfigDAL
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dal "github.com/asatraitis/mangrove/internal/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigDAL is a mock of ConfigDAL interface.
type MockConfigDAL struct {
	ctrl     *gomock.Controller
	recorder *MockConfigDALMockRecorder
	isgomock struct{}
}

// MockConfigDALMockRecorder is the mock recorder for MockConfigDAL.
type MockConfigDALMockRecorder struct {
	mock *MockConfigDAL
}

// NewMockConfigDAL creates a new mock instance.
func NewMockConfigDAL(ctrl *gomock.Controller) *MockConfigDAL {
	mock := &MockConfigDAL{ctrl: ctrl}
	mock.recorder = &MockConfigDALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigDAL) EXPECT() *MockConfigDALMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockConfigDAL) GetAll() (dal.Configs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(dal.Configs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockConfigDALMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockConfigDAL)(nil).GetAll))
}

// Set mocks base method.
func (m *MockConfigDAL) Set(arg0 dal.ConfigKey, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockConfigDALMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConfigDAL)(nil).Set), arg0, arg1)
}
