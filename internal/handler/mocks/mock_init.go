// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asatraitis/mangrove/internal/handler (interfaces: InitHandler)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_init.go -package=mocks github.com/asatraitis/mangrove/internal/handler InitHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInitHandler is a mock of InitHandler interface.
type MockInitHandler struct {
	ctrl     *gomock.Controller
	recorder *MockInitHandlerMockRecorder
	isgomock struct{}
}

// MockInitHandlerMockRecorder is the mock recorder for MockInitHandler.
type MockInitHandlerMockRecorder struct {
	mock *MockInitHandler
}

// NewMockInitHandler creates a new mock instance.
func NewMockInitHandler(ctrl *gomock.Controller) *MockInitHandler {
	mock := &MockInitHandler{ctrl: ctrl}
	mock.recorder = &MockInitHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitHandler) EXPECT() *MockInitHandlerMockRecorder {
	return m.recorder
}

// home mocks base method.
func (m *MockInitHandler) home(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "home", arg0, arg1)
}

// home indicates an expected call of home.
func (mr *MockInitHandlerMockRecorder) home(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "home", reflect.TypeOf((*MockInitHandler)(nil).home), arg0, arg1)
}
