// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asatraitis/mangrove/internal/service/config (interfaces: Configs)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_configs.go -package=mocks github.com/asatraitis/mangrove/internal/service/config Configs
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dal "github.com/asatraitis/mangrove/internal/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigs is a mock of Configs interface.
type MockConfigs struct {
	ctrl     *gomock.Controller
	recorder *MockConfigsMockRecorder
	isgomock struct{}
}

// MockConfigsMockRecorder is the mock recorder for MockConfigs.
type MockConfigsMockRecorder struct {
	mock *MockConfigs
}

// NewMockConfigs creates a new mock instance.
func NewMockConfigs(ctrl *gomock.Controller) *MockConfigs {
	mock := &MockConfigs{ctrl: ctrl}
	mock.recorder = &MockConfigsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigs) EXPECT() *MockConfigsMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockConfigs) GetAll() dal.Configs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(dal.Configs)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockConfigsMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockConfigs)(nil).GetAll))
}

// GetConfig mocks base method.
func (m *MockConfigs) GetConfig(arg0 dal.ConfigKey) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigsMockRecorder) GetConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigs)(nil).GetConfig), arg0)
}

// SetAll mocks base method.
func (m *MockConfigs) SetAll(arg0 dal.Configs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAll", arg0)
}

// SetAll indicates an expected call of SetAll.
func (mr *MockConfigsMockRecorder) SetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAll", reflect.TypeOf((*MockConfigs)(nil).SetAll), arg0)
}
